package parallelcloud.classifier;

import java.io.BufferedReader;
import java.io.FileReader;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.SequenceFile;
import org.apache.hadoop.io.Text;
import org.apache.mahout.math.DenseVector;
import org.apache.mahout.math.NamedVector;
import org.apache.mahout.math.VectorWritable;


public class SequenceFileCreator 
{
   public void createSeqFile()
   {
	   //read the CSVfile from generated in pre processing stage and create
	   //named vectors 
	   //write the class variable and the named vector to the sequence file   
			String csvFile = "trainingData.csv";//location of csvfile generated by the preprocessing step
			BufferedReader br = null;
			String line = "";
			String splitBy = ",";
		 
			try 
			{
		 
				br = new BufferedReader(new FileReader(csvFile));
				Configuration conf = new Configuration();
			    FileSystem fs = FileSystem.get(conf);
			    Path path = new Path("classifierdata/seqFile");
				SequenceFile.Writer writer = new SequenceFile.Writer(fs, conf,path, Text.class, VectorWritable.class);
			    VectorWritable vec = new VectorWritable();
				while ((line = br.readLine()) != null) 
				{    // use comma as separator
					String[] oneReview = line.split(splitBy);
					//key(review rating) should be a string
					String classLabel=oneReview[0];
					// the values are feature set
					double[] featureValuesArray=new double[] {Double.parseDouble(oneReview[1]),Double.parseDouble(oneReview[2]),Double.parseDouble(oneReview[3]),Double.parseDouble(oneReview[4]),Double.parseDouble(oneReview[5]),Double.parseDouble(oneReview[6])};
					NamedVector featureSetVector = new NamedVector(new DenseVector(featureValuesArray),classLabel);
					vec.set(featureSetVector);
				    writer.append(new Text(featureSetVector.getName()), vec);
				}
				writer.close();	
			} catch (Exception e) 
			{
				e.printStackTrace();
			}
			finally 
			{
				
				if (br != null) 
				{
					try 
					{
						br.close();
					} catch (Exception e) 
					{
						e.printStackTrace();
					}
				}
			}
		 
			System.out.println("Done");
		  }
		 
		
   }

